)]}'
{"version":3,"sources":["aldeed:autoform-bs-datepicker/autoform-bs-datepicker.html","aldeed:autoform-bs-datepicker/autoform-bs-datepicker.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,8C;AACA,gG;AACA,kB;AACA,8B;AACA,+E;AACA,iB;AACA,iC;AACA,iC;AACA,0C;AACA,mB;AACA,e;AACA,mB;AACA,yD;AACA,oB;AACA,kC;AACA,e;AACA,2B;AACA,uF;AACA,O;AACA,6B;AACA,iB;AACA,8C;AACA,mB;AACA,e;AACA,mB;AACA,yD;AACA,kB;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AC7BA,wB;;AAEA,+C;AACA,oC;AACA,yB;AACA,qB;AACA,8C;AACA,sD;AACA,K;AACA,I;AACA,oB;AACA,8B;AACA,qF;AACA,M;AACA,mC;AACA,gC;AACA,2D;AACA,O;AACA,iB;AACA,M;AACA,8B;AACA,yD;AACA,M;AACA,mC;AACA,gC;AACA,+B;AACA,O;AACA,iB;AACA,M;AACA,iC;AACA,gC;AACA,qB;AACA,O;AACA,iB;AACA,K;AACA,G;AACA,G;;AAEA,wC;AACA,uC;AACA,kC;AACA,0B;AACA,2D;AACA,kC;AACA,gB;AACA,G;AACA,G;;AAEA,uD;AACA,4F;AACA,uB;;AAEA,2B;AACA,iD;;AAEA,qC;AACA,4B;AACA,sC;;AAEA,sB;AACA,qC;AACA,kD;AACA,gD;AACA,8C;AACA,K;;AAEA,oD;AACA,mC;AACA,qD;AACA,4C;AACA,2C;AACA,mD;AACA,K;;AAEA,kD;AACA,mC;AACA,qD;AACA,4C;AACA,yC;AACA,+C;AACA,K;AACA,K;AACA,E;;AAEA,wD;AACA,4F;AACA,8B;AACA,E;;AAEA,8B;AACA,gC;AACA,6C;AACA,+C;AACA,qD;AACA,2B;AACA,6B;AACA,6B;AACA,kC;AACA,sB;AACA,C","file":"/packages/aldeed:autoform-bs-datepicker.js","sourcesContent":["\nTemplate.__checkName(\"afBootstrapDatepicker\");\nTemplate[\"afBootstrapDatepicker\"] = new Template(\"Template.afBootstrapDatepicker\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\"atts\"), \"buttonClasses\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"input-group date\"\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({\n      type: \"text\",\n      value: \"\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), HTML.SPAN({\n      \"class\": \"input-group-addon\"\n    }, HTML.I({\n      \"class\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"atts\"), \"buttonClasses\"));\n      }\n    })), \"\\n    \"), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", HTML.INPUT(HTML.Attrs({\n      type: \"text\",\n      value: \"\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n  \" ];\n  });\n}));\n","/* global AutoForm, $ */\n\nAutoForm.addInputType(\"bootstrap-datepicker\", {\n  template: \"afBootstrapDatepicker\",\n  valueOut: function () {\n    if (this.val()) {\n      var val = this.datepicker('getUTCDate');\n      return (val instanceof Date) ? val : this.val();\n    }\n  },\n  valueConverters: {\n    \"string\": function (val) {\n      return (val instanceof Date) ? AutoForm.Utility.dateToDateStringUTC(val) : val;\n    },\n    \"stringArray\": function (val) {\n      if (val instanceof Date) {\n        return [AutoForm.Utility.dateToDateStringUTC(val)];\n      }\n      return val;\n    },\n    \"number\": function (val) {\n      return (val instanceof Date) ? val.getTime() : val;\n    },\n    \"numberArray\": function (val) {\n      if (val instanceof Date) {\n        return [val.getTime()];\n      }\n      return val;\n    },\n    \"dateArray\": function (val) {\n      if (val instanceof Date) {\n        return [val];\n      }\n      return val;\n    }\n  }\n});\n\nTemplate.afBootstrapDatepicker.helpers({\n  atts: function addFormControlAtts() {\n    var atts = _.clone(this.atts);\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, \"form-control\");\n    delete atts.datePickerOptions;\n    return atts;\n  }\n});\n\nTemplate.afBootstrapDatepicker.rendered = function () {\n  var $input = this.data.atts.buttonClasses ? this.$('.input-group.date') : this.$('input');\n  var data = this.data;\n\n  // instanciate datepicker\n  $input.datepicker(data.atts.datePickerOptions);\n\n  // set and reactively update values\n  this.autorun(function () {\n    var data = Template.currentData();\n\n    // set field value\n    if (data.value instanceof Date) {\n      $input.datepicker('setUTCDate', data.value);\n    } else if (typeof data.value === \"string\") {\n      $input.datepicker('update', data.value);\n    }\n\n    // set start date if there's a min in the schema\n    if (data.min instanceof Date) {\n      // datepicker plugin expects local Date object,\n      // so convert UTC Date object to local\n      var startDate = utcToLocal(data.min);\n      $input.datepicker('setStartDate', startDate);\n    }\n\n    // set end date if there's a max in the schema\n    if (data.max instanceof Date) {\n      // datepicker plugin expects local Date object,\n      // so convert UTC Date object to local\n      var endDate = utcToLocal(data.max);\n      $input.datepicker('setEndDate', endDate);\n    }\n  });\n};\n\nTemplate.afBootstrapDatepicker.destroyed = function () {\n  var $input = this.data.atts.buttonClasses ? this.$('.input-group.date') : this.$('input');\n  $input.datepicker('remove');\n};\n\nfunction utcToLocal(utcDate) {\n  var localDateObj = new Date();\n  localDateObj.setDate(utcDate.getUTCDate());\n  localDateObj.setMonth(utcDate.getUTCMonth());\n  localDateObj.setFullYear(utcDate.getUTCFullYear());\n  localDateObj.setHours(0);\n  localDateObj.setMinutes(0);\n  localDateObj.setSeconds(0);\n  localDateObj.setMilliseconds(0);\n  return localDateObj;\n}\n"]}