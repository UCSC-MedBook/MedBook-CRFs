)]}'
{"version":3,"sources":["aldeed:autoform-select2/autoform-select2.html","aldeed:autoform-select2/autoform-select2.js","aldeed:autoform-select2/themes/bootstrap3.html","aldeed:autoform-select2/themes/bootstrap3.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,kC;AACA,wE;AACA,kB;AACA,4C;AACA,2E;AACA,uC;AACA,oE;AACA,iB;AACA,0D;AACA,+D;AACA,+B;AACA,0E;AACA,oB;AACA,c;AACA,I;;;;;;;;;;;;;;;;;;;ACfA,qC;;AAEA,kC;AACA,wB;AACA,yB;AACA,+B;AACA,I;AACA,oB;AACA,8C;AACA,mC;AACA,2B;AACA,2C;AACA,8B;AACA,uD;AACA,W;AACA,O;AACA,iB;AACA,M;AACA,6C;AACA,oC;AACA,2B;AACA,2C;AACA,8B;AACA,qD;AACA,W;AACA,O;AACA,iB;AACA,M;AACA,0C;AACA,iC;AACA,2B;AACA,2C;AACA,8B;AACA,qD;AACA,W;AACA,O;AACA,iB;AACA,K;AACA,I;AACA,qC;AACA,gG;AACA,sC;;AAEA,uD;AACA,+C;;AAEA,uB;AACA,uB;;AAEA,sE;AACA,gC;AACA,0B;AACA,2B;AACA,gF;AACA,kB;AACA,qE;AACA,8E;AACA,2D;AACA,gB;AACA,wB;AACA,sB;AACA,S;AACA,K;;AAEA,8B;AACA,iD;AACA,0B;AACA,2B;AACA,yB;AACA,yB;AACA,qE;AACA,8E;AACA,2D;AACA,uB;AACA,6C;AACA,yD;AACA,gD;AACA,sB;AACA,S;AACA,O;;AAEA,mB;AACA,G;AACA,G;;AAEA,4B;AACA,6C;AACA,oB;AACA,gB;AACA,uB;AACA,M;AACA,wB;AACA,yB;AACA,K;AACA,gB;AACA,G;AACA,G;;AAEA,2C;AACA,sB;;AAEA,wB;AACA,wE;;AAEA,gC;AACA,sC;;AAEA,oB;AACA,wC;AACA,0B;AACA,gC;AACA,O;AACA,O;;AAEA,gD;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;;;ACnHA,6C;AACA,8F;AACA,kB;AACA,4C;AACA,uD;AACA,uC;AACA,oE;AACA,iB;AACA,0D;AACA,+D;AACA,+B;AACA,0E;AACA,oB;AACA,c;AACA,I;;;;;;;;;;;;;;;;;;;ACfA,+B;;AAEA,uC;AACA,6C;AACA,oB;AACA,gB;AACA,uB;AACA,M;AACA,wB;AACA,yB;AACA,K;AACA,gB;AACA,I;AACA,uC;AACA,kC;AACA,0B;AACA,2D;AACA,+B;AACA,gB;AACA,G;AACA,G;;AAEA,sD;AACA,sB;;AAEA,wB;AACA,wE;;AAEA,gC;AACA,sC;;AAEA,oB;AACA,wC;AACA,0B;AACA,gC;AACA,O;AACA,O;;AAEA,gD;AACA,K;AACA,E","file":"/packages/aldeed:autoform-select2.js","sourcesContent":["\nTemplate.__checkName(\"afSelect2\");\nTemplate[\"afSelect2\"] = new Template(\"Template.afSelect2\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"optionAtts\"));\n    }), Blaze.View(function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    })), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","/* global AutoForm, _, $, Template */\n\nAutoForm.addInputType(\"select2\", {\n  template: \"afSelect2\",\n  valueOut: function () {\n    return this.select2(\"val\");\n  },\n  valueConverters: {\n    \"number\": AutoForm.Utility.stringToNumber,\n    \"numberArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToNumber(item);\n        });\n      }\n      return val;\n    },\n    \"boolean\": AutoForm.Utility.stringToBool,\n    \"booleanArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToBool(item);\n        });\n      }\n      return val;\n    },\n    \"date\": AutoForm.Utility.stringToDate,\n    \"dateArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToDate(item);\n        });\n      }\n      return val;\n    }\n  },\n  contextAdjust: function (context) {\n    //can fix issues with some browsers selecting the firstOption instead of the selected option\n    context.atts.autocomplete = \"off\";\n\n    var itemAtts = _.omit(context.atts, 'firstOption');\n    var firstOption = context.atts.firstOption;\n\n    // build items list\n    context.items = [];\n\n    // If a firstOption was provided, add that to the items list first\n    if (firstOption !== false) {\n      context.items.push({\n        name: context.name,\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),\n        value: \"\",\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: \"\",\n        selected: false,\n        atts: itemAtts\n      });\n    }\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      context.items.push({\n        name: context.name,\n        label: opt.label,\n        value: opt.value,\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: opt.value,\n        selected: (_.isArray(context.value) ?\n                   _.contains(context.value, opt.value) :\n                   opt.value === context.value),\n        atts: itemAtts\n      });\n    });\n\n    return context;\n  }\n});\n\nTemplate.afSelect2.helpers({\n  optionAtts: function afSelectOptionAtts() {\n    var item = this;\n    var atts = {\n      value: item.value\n    };\n    if (item.selected) {\n      atts.selected = \"\";\n    }\n    return atts;\n  }\n});\n\nTemplate.afSelect2.rendered = function () {\n  var template = this;\n\n  // instanciate select2\n  template.$('select').select2(template.data.atts.select2Options || {});\n\n  template.autorun(function () {\n    var data = Template.currentData();\n\n    var values = [];\n    _.each(data.items, function (item) {\n      if (item.selected) {\n        values.push(item.value);\n      }\n    });\n\n    template.$('select').select2(\"val\", values);\n  });\n};\n","\nTemplate.__checkName(\"afSelect2_bootstrap3\");\nTemplate[\"afSelect2_bootstrap3\"] = new Template(\"Template.afSelect2_bootstrap3\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"optionAtts\"));\n    }), Blaze.View(function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    })), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","/* global Template, AutoForm */\n\nTemplate.afSelect2_bootstrap3.helpers({\n  optionAtts: function afSelectOptionAtts() {\n    var item = this;\n    var atts = {\n      value: item.value\n    };\n    if (item.selected) {\n      atts.selected = \"\";\n    }\n    return atts;\n  },\n  atts: function addFormControlAtts() {\n    var atts = _.clone(this.atts);\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, \"form-control\");\n    delete atts.select2Options;\n    return atts;\n  }\n});\n\nTemplate.afSelect2_bootstrap3.rendered = function () {\n  var template = this;\n\n  // instanciate select2\n  template.$('select').select2(template.data.atts.select2Options || {});\n\n  template.autorun(function () {\n    var data = Template.currentData();\n\n    var values = [];\n    _.each(data.items, function (item) {\n      if (item.selected) {\n        values.push(item.value);\n      }\n    });\n\n    template.$('select').select2(\"val\", values);\n  });\n};\n"]}